create or replace PROCEDURE INSERT1(ISBN_NO VARCHAR,STU_ID VARCHAR)
IS
CURSOR BOOK_COPY_AVL IS 
SELECT AVAILABILITY_STATUS FROM BOOK_COPY WHERE ISBN=ISBN_NO;

CHECK_STU_ID NUMBER;
CHECK_ISBN NUMBER;
CHECK_RETURN_STATUS NUMBER;
CHECK_NO_OF_BOOKS NUMBER;
CURSOR_AVL VARCHAR2(3);

CURSOR FETCH_COPY_ID IS 
SELECT BOOK_COPY_ID,AVAILABILITY_STATUS FROM BOOK_COPY WHERE ISBN=ISBN_NO;

FETCHED_COPY_ID BOOK_COPY.BOOK_COPY_ID%TYPE;
FETCHED_AVL BOOK_COPY.AVAILABILITY_STATUS%TYPE;
B_TITLE BOOK.BOOK_TITLE%TYPE;




BEGIN



--CHECKING STUDENT VALIDITY
SELECT COUNT(*) INTO CHECK_STU_ID FROM Student_Information WHERE Student_ID=STU_ID;
IF CHECK_STU_ID=1
THEN
dbms_output.put_line('THE USER '||STU_ID||' IS FROM THE INSTITUTE.');
ELSE
dbms_output.put_line('THE USER '||STU_ID||' IS NOT FROM THE INSTITUTE.');
END IF;






--CHECKING IF BOOK IS REGISTERED IN THE LIBRARY
SELECT COUNT(*) INTO CHECK_ISBN FROM BOOK WHERE ISBN=ISBN_NO;
IF CHECK_ISBN=1
THEN
dbms_output.put_line('THIS BOOK '||ISBN_NO||' EXSIST IN LIBRARY.');
ELSE
dbms_output.put_line('THIS BOOK '||ISBN_NO||' DOSE NOT EXSIST IN LIBRARY.');
END IF;




--CHECKING IF ANY COPY OF THE BOOK IS AVAILABLE OR NOT
OPEN BOOK_COPY_AVL; 
CHECK_NO_OF_BOOKS := 0;
LOOP
    FETCH BOOK_COPY_AVL INTO CURSOR_AVL;
    EXIT WHEN BOOK_COPY_AVL%NOTFOUND;
    IF CURSOR_AVL='Yes' THEN
        CHECK_NO_OF_BOOKS:=1;
        EXIT;
    END IF;
END LOOP; 
IF CHECK_NO_OF_BOOKS=1 THEN
    DBMS_OUTPUT.PUT_LINE('A copy of the requested book is available');
else
    DBMS_OUTPUT.PUT_LINE('No copy of the requested book is available');
end if;
CLOSE BOOK_COPY_AVL;








--MAKING SURE THE USER DOESNT BORROW SAME BOOK
CHECK_RETURN_STATUS:=0;
SELECT COUNT(*) INTO CHECK_RETURN_STATUS FROM BORROWING_INFO WHERE ISBN=ISBN_NO AND 
STUDENT_ID=STU_ID AND ACTUAL_RETURN_DATE = '01-01-00';


IF CHECK_RETURN_STATUS=1
THEN
dbms_output.put_line('THE STUDENT ALREADY HAVE THIS BOOK');
ELSE
dbms_output.put_line('ISSUING BOOK TO STUDENT  ' ||STU_ID|| '.');
END IF;






OPEN FETCH_COPY_ID;
LOOP
    FETCH FETCH_COPY_ID INTO FETCHED_COPY_ID, FETCHED_AVL;
    EXIT WHEN FETCH_COPY_ID%NOTFOUND;
    IF FETCHED_AVL='Yes' THEN
    EXIT;
    END IF;
END LOOP;
CLOSE FETCH_COPY_ID;


SELECT BOOK_TITLE INTO B_TITLE FROM BOOK WHERE ISBN=ISBN_NO;







IF CHECK_STU_ID IS NOT NULL AND CHECK_ISBN IS NOT NULL AND CHECK_RETURN_STATUS=0
THEN
INSERT INTO borrowing_info(STUDENT_ID, BOOK_COPY_ID, TITLE, ISSUE_DATE, EXPECTED_RETURN_DATE,ISBN)
VALUES(STU_ID,FETCHED_COPY_ID,B_TITLE,SYSDATE,SYSDATE+14, ISBN_NO);
dbms_output.put_line('ITS WORKING');
dbms_output.put_line(B_TITLE || ' with Book ID: ' || FETCHED_COPY_ID || ' is issued SUCCESSFULLY! ' );

END IF;








END;
















SET SERVEROUTPUT ON;

BEGIN INSERT1('C54321','STUD1006');
EXCEPTION 
    WHEN OTHERS
        THEN
        dbms_output.put_line(DBMS_UTILITY.format_error_stack);
        END;
        /




















































CREATE OR REPLACE TRIGGER UPDATING_AVL
AFTER INSERT OR UPDATE ON BORROWING_INFO
FOR EACH ROW
BEGIN
 IF INSERTING THEN
 UPDATE BOOK_COPY
 SET availability_status='No'
 WHERE BOOK_COPY_ID=:NEW.BOOK_COPY_ID;

ELSIF UPDATING THEN 
 UPDATE BOOK_COPY
 SET availability_status='Yes'
 WHERE BOOK_COPY_ID=:OLD.BOOK_COPY_ID;
 END IF;
END;
/







